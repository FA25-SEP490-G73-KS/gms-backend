openapi: 3.1.0
info:
  title: GMS Backend API
  description: >-
    OpenAPI specification generated from REQUIREMENTS.md.
    - All query APIs support pagination and sorting via `page`, `size`, and `sort` parameters.
    - Database: MySQL (informational; not impacting API schema).
    - 3-layer architecture (controller, service, repository) and interface-based services (informational).
  version: 1.0.0
servers:
  - url: /api
    description: Base API path

tags:
  - name: Authentication
  - name: Accounts
  - name: Appointments
  - name: ServiceTickets

paths:
  /auth/login:
    post:
      tags: [Authentication]
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              default:
                value: { phone: "0912345678", password: "secretPass" }
      responses:
        '200':
          description: Login success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Invalid credentials or bad request
  /auth/forgot-password:
    post:
      tags: [Authentication]
      summary: Forgot password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phone:
                  type: string
                  description: Phone number (10 digits)
                  pattern: '^\d{10}$'
              required: [phone]
      responses:
        '200':
          description: Password reset initiated
        '404':
          description: Account not found

  /accounts:
    get:
      tags: [Accounts]
      summary: List all accounts
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: Paged list of accounts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageAccountResponse'
    post:
      tags: [Accounts]
      summary: Create an account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountCreateRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'
        '400':
          description: Validation error

  /accounts/search:
    get:
      tags: [Accounts]
      summary: Search accounts by phone keyword
      parameters:
        - name: phone
          in: query
          description: Phone keyword to search by (partial match)
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: Paged search result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageAccountResponse'

  /accounts/{accountId}:
    get:
      tags: [Accounts]
      summary: Find an account by ID
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Account found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'
        '404':
          description: Account not found
    put:
      tags: [Accounts]
      summary: Update an account
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountUpdateRequest'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'
        '400':
          description: Validation error
        '404':
          description: Account not found
    delete:
      tags: [Accounts]
      summary: Delete an account
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Deleted
        '404':
          description: Account not found

  /appointments:
    get:
      tags: [Appointments]
      summary: List all appointments
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: Paged list of appointments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageAppointmentResponse'

  /appointments/{appointmentId}/date:
    patch:
      tags: [Appointments]
      summary: Update appointment date
      parameters:
        - name: appointmentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                appointmentDate:
                  type: string
                  format: date-time
              required: [appointmentDate]
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppointmentResponse'
        '404':
          description: Appointment not found

  /appointments/{appointmentId}/status:
    patch:
      tags: [Appointments]
      summary: Update appointment status (cannot set to Quá hạn)
      description: Setting status to 'Quá hạn' (Overdue) via this API is not allowed.
      parameters:
        - name: appointmentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [Xác nhận, Đã đến, Đã hủy]
              required: [status]
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppointmentResponse'
        '400':
          description: Invalid status (e.g., Quá hạn)
        '404':
          description: Appointment not found

  /service-tickets:
    get:
      tags: [ServiceTickets]
      summary: List all service tickets
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: Paged list of service tickets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageServiceTicketResponse'
    post:
      tags: [ServiceTickets]
      summary: Create a service ticket
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceTicketCreateRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceTicketResponse'
        '400':
          description: Validation error

  /service-tickets/search:
    get:
      tags: [ServiceTickets]
      summary: Search service tickets
      parameters:
        - name: appointmentDate
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: customerId
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: vehicleId
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: Paged search result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageServiceTicketResponse'

  /service-tickets/{serviceTicketId}:
    get:
      tags: [ServiceTickets]
      summary: Find a service ticket by ID
      parameters:
        - name: serviceTicketId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Service ticket found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceTicketResponse'
        '404':
          description: Service ticket not found
    put:
      tags: [ServiceTickets]
      summary: Update a service ticket
      parameters:
        - name: serviceTicketId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceTicketUpdateRequest'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceTicketResponse'
        '404':
          description: Service ticket not found

components:
  parameters:
    page:
      name: page
      in: query
      description: Page number (0-based)
      required: false
      schema:
        type: integer
        minimum: 0
        default: 0
    size:
      name: size
      in: query
      description: Page size
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 200
        default: 20
    sort:
      name: sort
      in: query
      description: Sort by property, e.g., 'createdAt,desc'. Multiple allowed.
      required: false
      schema:
        type: array
        items:
          type: string
      style: form
      explode: true

  schemas:
    # Authentication
    LoginRequest:
      type: object
      properties:
        phone:
          type: string
          description: Phone number (10 digits)
          pattern: '^\d{10}$'
        password:
          type: string
          minLength: 8
      required: [phone, password]
    LoginResponse:
      type: object
      properties:
        token:
          type: string
        account:
          $ref: '#/components/schemas/AccountResponse'

    # Core entities
    Role:
      type: object
      properties:
        roleId:
          type: integer
          format: int64
        roleName:
          type: string
          enum: [Service Advisor, Accountant, Manager, Warehouse Staff]
      required: [roleId, roleName]

    Account:
      type: object
      properties:
        accountId:
          type: integer
          format: int64
        phone:
          type: string
          description: References Employee.phone; must be 10 digits
          pattern: '^\d{10}$'
        roleId:
          type: integer
          format: int64
      required: [accountId, phone, roleId]

    AccountCreateRequest:
      type: object
      properties:
        phone:
          type: string
          pattern: '^\d{10}$'
        roleId:
          type: integer
          format: int64
        password:
          type: string
          minLength: 8
      required: [phone, roleId, password]

    AccountUpdateRequest:
      type: object
      properties:
        phone:
          type: string
          pattern: '^\d{10}$'
        roleId:
          type: integer
          format: int64
        password:
          type: string
          minLength: 8
      description: Supply only fields to update. Password change is optional.

    AccountResponse:
      allOf:
        - $ref: '#/components/schemas/Account'
      description: Does not include password.

    Customer:
      type: object
      properties:
        customerId:
          type: integer
          format: int64
        fullName:
          type: string
        phone:
          type: string
          pattern: '^\d{10}$'
        zaloId:
          type: string
        address:
          type: string
        customerType:
          type: string
          enum: [cá nhân, doanh nghiệp]
        loyaltyLevel:
          type: string
          enum: [VIP, VVIP, Normal]
      required: [customerId, fullName, phone]

    Vehicle:
      type: object
      properties:
        vehicleId:
          type: integer
          format: int64
        customerId:
          type: integer
          format: int64
        licensePlate:
          type: string
        brand:
          type: string
        model:
          type: string
        year:
          type: integer
        vin:
          type: string
      required: [vehicleId, customerId, licensePlate]

    Appointment:
      type: object
      properties:
        appointmentId:
          type: integer
          format: int64
        customerId:
          type: integer
          format: int64
        vehicleId:
          type: integer
          format: int64
        serviceType:
          type: string
          enum: [Sơn, Thay thế phụ tùng, Bảo dưỡng]
        appointmentDate:
          type: string
          format: date-time
        status:
          type: string
          enum: [Xác nhận, Đã đến, Quá hạn, Đã hủy]
        description:
          type: string
        imageUrl:
          type: string
          format: uri
        createdAt:
          type: string
          format: date-time
      required: [appointmentId, customerId, serviceType, appointmentDate, status]

    AppointmentResponse:
      allOf:
        - $ref: '#/components/schemas/Appointment'

    # Pagination wrappers
    PageMeta:
      type: object
      properties:
        page:
          type: integer
        size:
          type: integer
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
      required: [page, size, totalElements, totalPages]

    PageAccountResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/AccountResponse'
        page:
          $ref: '#/components/schemas/PageMeta'

    PageAppointmentResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/AppointmentResponse'
        page:
          $ref: '#/components/schemas/PageMeta'

    ServiceTicket:
      type: object
      properties:
        serviceTicketId:
          type: integer
          format: int64
        appointmentId:
          type: integer
          format: int64
        employeeId:
          type: integer
          format: int64
        customerId:
          type: integer
          format: int64
        vehicleId:
          type: integer
          format: int64
        status:
          type: string
          enum: [chờ báo giá, duyệt, không duyệt, đang sửa chữa, Chờ thanh toán, Chờ công nợ, hoàn thành, Hủy]
        notes:
          type: string
        createdAt:
          type: string
          format: date-time
        deliveryAt:
          type: string
          format: date-time
      required: [serviceTicketId, appointmentId, customerId, vehicleId, status, createdAt]

    ServiceTicketCreateRequest:
      type: object
      properties:
        appointmentId:
          type: integer
          format: int64
        employeeId:
          type: integer
          format: int64
        customerId:
          type: integer
          format: int64
        vehicleId:
          type: integer
          format: int64
        status:
          type: string
          enum: [chờ báo giá, duyệt, không duyệt, đang sửa chữa, Chờ thanh toán, Chờ công nợ, hoàn thành, Hủy]
        notes:
          type: string
        deliveryAt:
          type: string
          format: date-time
      required: [appointmentId, customerId, vehicleId, status]

    ServiceTicketUpdateRequest:
      type: object
      properties:
        appointmentId:
          type: integer
          format: int64
        employeeId:
          type: integer
          format: int64
        customerId:
          type: integer
          format: int64
        vehicleId:
          type: integer
          format: int64
        status:
          type: string
          enum: [chờ báo giá, duyệt, không duyệt, đang sửa chữa, Chờ thanh toán, Chờ công nợ, hoàn thành, Hủy]
        notes:
          type: string
        deliveryAt:
          type: string
          format: date-time
      description: Supply only fields to update.

    ServiceTicketResponse:
      allOf:
        - $ref: '#/components/schemas/ServiceTicket'

    PageServiceTicketResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/ServiceTicketResponse'
        page:
          $ref: '#/components/schemas/PageMeta'
